{"version":3,"file":"static/js/847.c9149540.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst ContactFormContainer = styled.div`\n  padding: 40px;\n  text-align: center;\n`;\n\nconst ContactFormTitle = styled.h2`\n  margin-bottom: 20px;\n  color: purple;\n`;\n\nconst BtnForm = styled.button`\n  font-weight: bold;\n  font-size: 18px;\n  color: #8b54c1;\n  border: 1px solid #8b54c1;\n  background-color: inherit;\n  padding: 6px;\n  border-radius: 5%;\n  cursor: pointer;\n  transition: color 0.3s ease-in-out;\n  &:focus,\n  &:hover {\n    color: purple;\n  }\n`;\n\nexport { ContactFormContainer, ContactFormTitle, BtnForm };\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport styled from '@emotion/styled';\nimport {\n  BtnForm,\n  ContactFormContainer,\n  ContactFormTitle,\n} from './ContactForm.styled';\n\nconst FormField = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  label {\n    margin-bottom: 5px;\n    color: purple;\n  }\n  input {\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n  .error-message {\n    color: red;\n    margin-top: 5px;\n  }\n`;\n\nexport default function ContactForm() {\n  const initialState = { name: '', number: '' };\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash, and spaces.'\n      )\n      .required('Name is required'),\n    number: Yup.string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses, and can start with +'\n      )\n      .required('Phone number is required'),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (contacts.find(contact => contact.number === number)) {\n      toast.error(`${number} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <ContactFormContainer>\n      <ContactFormTitle>Add a new contact</ContactFormTitle>\n      <Formik\n        initialValues={initialState}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <FormField>\n            <label htmlFor=\"name\">Name</label>\n            <Field type=\"text\" id=\"name\" name=\"name\" />\n            <ErrorMessage\n              component=\"div\"\n              name=\"name\"\n              className=\"error-message\"\n            />\n          </FormField>\n\n          <FormField>\n            <label htmlFor=\"number\">Number</label>\n            <Field type=\"text\" id=\"number\" name=\"number\" />\n            <ErrorMessage\n              component=\"div\"\n              name=\"number\"\n              className=\"error-message\"\n            />\n          </FormField>\n\n          <BtnForm type=\"submit\" disabled={contacts.length === 0}>\n            Add contact\n          </BtnForm>\n        </Form>\n      </Formik>\n      <ToastContainer />\n    </ContactFormContainer>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  list-style: none;\n  background-color: #8b54c1;\n  color: white;\n  padding: 0;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid #ccc;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nexport const ContactsContainer = styled.div`\n  flex: 1;\n  text-align:start;\n  font-weight: bold;\n  margin-right: 10px;\n`;\n\nexport const PhoneContainer = styled.div`\n text-align:start;\n  flex: 1;\n`;\n\nexport const DeleteContactBtn = styled.button`\n   background-color: #e5d2f8;\n   width: 100px;\n   cursor: pointer;\n   color: #8b54c1;\n   font-weight: 800;\n   font-size: 18px;\n\n   &&:hover{\n    background-color: white;\n\n   }\n\n`","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, removeContact } from 'redux/contacts/operations';\nimport {\n  ContactsContainer,\n  ContactsItem,\n  ContactsList,\n  DeleteContactBtn,\n  PhoneContainer,\n} from './ContactList.styled';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport default function ContactList() {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  const filteredContacts = () => {\n    if (filter) {\n      const normalizedFilter = filter.toLowerCase();\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  return (\n    <ContactsList>\n      {filteredContacts().map(({ id, name, number }) => (\n        <ContactsItem key={id}>\n          <ContactsContainer>{name}:</ContactsContainer>\n          <PhoneContainer>{number}</PhoneContainer>\n          <DeleteContactBtn onClick={() => handleDeleteContact(id)}>\n            Delete\n          </DeleteContactBtn>\n        </ContactsItem>\n      ))}\n    </ContactsList>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const FilterForm = styled.label`\npadding: 4px;\nfont-size: 22px;\n`\n\nexport const FilterLabel = styled.label`\n    font-size: 24px;\n    margin-right: 20px;\n`\n\nexport const FilterInput = styled.input`\n    padding: 8px;\n    width: 600px;\n    border:none;\n    border-bottom: 1px solid lightgrey;\n    margin: 10px;\n`","\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { FilterLabel, FilterInput, FilterForm } from './Filter.styled'; \nimport { useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <FilterForm>\n      <FilterLabel htmlFor=\"1\">Find contacts by name</FilterLabel>\n      <FilterInput\n        id=\"1\"\n        type=\"text\"\n        name=\"filter\"\n        title=\"Use this field to filter contacts by contact's name\"\n        onChange={handleChangeFilter}\n      />\n    </FilterForm>\n  );\n}","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter/>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n\n","\nexport const getContacts = state => state.contacts.contacts;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n\nexport const getTheme = state => state.theme;\n"],"names":["ContactFormContainer","styled","_templateObject","_taggedTemplateLiteral","ContactFormTitle","_templateObject2","BtnForm","_templateObject3","FormField","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","validationSchema","Yup","shape","name","matches","required","number","_jsxs","children","_jsx","Formik","initialValues","onSubmit","values","_ref","resetForm","find","contact","toast","concat","addContact","Form","htmlFor","Field","type","id","ErrorMessage","component","className","disabled","length","ToastContainer","ContactsList","ContactsItem","ContactsContainer","PhoneContainer","_templateObject4","DeleteContactBtn","_templateObject5","ContactList","filter","getFilter","useEffect","fetchContacts","normalizedFilter","toLowerCase","includes","filteredContacts","map","onClick","removeContact","handleDeleteContact","FilterForm","FilterLabel","FilterInput","Filter","title","onChange","e","setFilter","target","value","Contacts","isLoading","getIsLoading","_Fragment","Helmet","state"],"sourceRoot":""}